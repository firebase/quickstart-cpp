// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://maven.google.com'  }
    jcenter()
      google()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.3'
    classpath 'com.google.gms:google-services:4.0.1'
  }
}

allprojects {
  repositories {
    mavenLocal()
    maven { url 'https://maven.google.com'  }
    jcenter()
  }
}

apply plugin: 'com.android.application'

// Pre-experimental Gradle plug-in NDK boilerplate below.
// Right now the Firebase plug-in does not work with the experimental
// Gradle plug-in so we're using ndk-build for the moment.
project.ext {
  // Configure the Firebase C++ SDK location.
  firebase_cpp_sdk_dir = System.getProperty('firebase_cpp_sdk.dir')
  if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
    firebase_cpp_sdk_dir = System.getenv('FIREBASE_CPP_SDK_DIR')
    if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
      if ((new File('firebase_cpp_sdk')).exists()) {
        firebase_cpp_sdk_dir = 'firebase_cpp_sdk'
      } else {
        throw new StopActionException(
          'firebase_cpp_sdk.dir property or the FIREBASE_CPP_SDK_DIR ' +
          'environment variable must be set to reference the Firebase C++ ' +
          'SDK install directory.  This is used to configure static library ' +
          'and C/C++ include paths for the SDK.')
      }
    }
  }
  if (!(new File(firebase_cpp_sdk_dir)).exists()) {
    throw new StopActionException(
      sprintf('Firebase C++ SDK directory %s does not exist',
              firebase_cpp_sdk_dir))
  }
  // Check the NDK location using the same configuration options as the
  // experimental Gradle plug-in.
  ndk_dir = project.android.ndkDirectory
  if (ndk_dir == null || !ndk_dir.exists()) {
    ndk_dir = System.getenv('ANDROID_NDK_HOME')
    if (ndk_dir == null || ndk_dir.isEmpty()) {
      throw new StopActionException(
        'Android NDK directory should be specified using the ndk.dir ' +
        'property or ANDROID_NDK_HOME environment variable.')
    }
  }
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.3'

    sourceSets {
      main {
        jniLibs.srcDirs = ['libs']
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src/android/java']
        res.srcDirs = ['res']
      }
    }

    defaultConfig {
        applicationId 'com.google.firebase.cpp.functions.testapp'
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName '1.0'

        externalNativeBuild {
            ndkBuild {
                arguments "FIREBASE_CPP_SDK_DIR=${project.ext.firebase_cpp_sdk_dir}"
            }
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file("jni/Android.mk")
        }
    }
    buildTypes {
      release {
            minifyEnabled true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile file(project.ext.firebase_cpp_sdk_dir + "/libs/android/app.pro")
            proguardFile file(project.ext.firebase_cpp_sdk_dir + "/libs/android/auth.pro")
            proguardFile file(project.ext.firebase_cpp_sdk_dir + "/libs/android/functions.pro")
            proguardFile file('proguard.pro')
      }
    }
}

dependencies {
    implementation 'com.google.firebase:firebase-core:16.0.0'
    implementation 'com.google.firebase:firebase-auth:16.0.1'
    implementation 'com.google.firebase:firebase-functions:16.1.0'
}

apply plugin: 'com.google.gms.google-services'